version: '3'
services:

  server-app:
    build:
      context: ./server-app
    networks:
      nginxmesh:
        aliases:
          - server-app
    environment:
      - INSTANA_DEV=1
      - SERVER_PORT=8080
    healthcheck:
      test: ["CMD", "ping", "localhost:8080"]
      interval: 8s
      timeout: 30s
      retries: 25
    expose:
      - "8080"

  client-app-1:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-2:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-3:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-4:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-5:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-6:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-7:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-8:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  client-app-9:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo

  client-app-10:
    build:
      context: ./client-app
    networks:
      - nginxmesh
    environment:
      - INSTANA_DEV=1
      - target_url=http://nginx-gateway:8080/nginx-demo
    depends_on:
      agent:
        condition: service_healthy

  nginx:
    build:
      context: ./nginx
      args:
        download_key: ${download_key}
        agent_key: ${agent_key}
        nginx_version: '1.21.6'
    networks:
      nginxmesh:
        aliases:
          - nginx-gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/instana-config.json:/etc/instana-config.json
      # Include the following lines to override the nginx module, for local testing
      # - ./nginx/ngx_http_opentracing_module.so:/opt/instana/nginx/ngx_http_opentracing_module.so:ro
      # - ./nginx/ngx_http_opentracing_module.so:/usr/lib/nginx/modules/ngx_http_opentracing_module.so:ro
    expose:
      - "8080"
    depends_on:
      agent:
        condition: service_healthy

  agent:
    image: icr.io/instana/agent
    pid: "host"
    privileged: true
    volumes:
      - /var/run:/var/run
      - /run:/run
      # Include the File.cfg so spans are written to disk. We use them to verify which spans have been sent to the agent.
      - ./agent/com.instana.agent.main.sender.File.cfg:/opt/instana/agent/etc/instana/com.instana.agent.main.sender.File.cfg:ro
      # Mount the logs directly so we can directly access the span-*.log files to check the produced spans.
      - ./agent/logs:/opt/instana/agent/data/log
    networks:
      nginxmesh:
        aliases:
          - instana-agent
    environment:
      - INSTANA_AGENT_ENDPOINT=${agent_endpoint:-ingress-red-saas.instana.io}
      - INSTANA_AGENT_ENDPOINT_PORT=${agent_endpoint_port:-443}
      - INSTANA_DOWNLOAD_KEY=${download_key}
      - INSTANA_AGENT_KEY=${agent_key}
      - INSTANA_AGENT_ZONE=${agent_zone:-nginx-tracing-demo}
    depends_on:
      server-app:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "localhost:42699"]
      interval: 8s
      timeout: 10s
      retries: 5
    expose:
      - "42699"

networks:
  nginxmesh: {}
